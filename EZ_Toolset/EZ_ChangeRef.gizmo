set cut_paste_input [stack 0]
version 14.0 v6
push $cut_paste_input
NoOp {
 name EZ_ChangeRef1
 knobChanged "import nuke\n\ngroup = nuke.thisNode()\nknob = nuke.thisKnob()\nnodeName = group\['nodeName'].value()\nreference_node = nuke.toNode(nodeName)\n\nif \"nodeName\" in knob.name():\n    if reference_node is None:\n        group\['nodeName'].setLabel(\"<font color=#FA466A><b> ><b\\>\")\n        group\['exists'].setValue(False)          \n            \n    else:\n        group\['nodeName'].setLabel(\" >\")\n        group\['exists'].setValue(True)"
 tile_color 0x968022ff
 label "Ref: \[value newRef]"
 selected true
 xpos -718
 ypos -268
 addUserKnob {20 User l Frame}
 addUserKnob {26 text l "<font color=#D6C3AA> @b;Reference Node"}
 addUserKnob {1 nodeName l "<font color=#FA466A><b> ><b\\>"}
 addUserKnob {22 SelectNode l Select -STARTLINE T "group = nuke.thisNode()\nwith nuke.root():\n\tTracker = nuke.selectedNode()\['name'].value()\nprint(group)\nprint(Tracker)\ngroup\['nodeName'].setValue(Tracker)\n"}
 addUserKnob {6 exists -STARTLINE +INVISIBLE}
 addUserKnob {26 ""}
 addUserKnob {26 text_1 l "<font color=#D6C3AA> @b; New Reference"}
 addUserKnob {3 newRef l " "}
 newRef 1001
 addUserKnob {22 SetCurrentFrame l "Set Current" -STARTLINE T "nuke.thisNode()\['newRef'].setValue(nuke.frame())"}
 addUserKnob {26 ""}
 addUserKnob {22 bakeScript l "Go !" t "\n" T "import nuke\n\ngroup = nuke.thisNode()\nnodeName = group\['nodeName'].value()\nreference_node = nuke.toNode(nodeName)\nnewRef = nuke.thisNode().knob('newRef').value()\ntracker_exists = group\['exists'].value()\n\nif tracker_exists:\n    \n    transVal = reference_node.knob('translate').valueAt(newRef)\n    print(\"transVal =\", transVal)\n    rotVal = reference_node.knob('rotate').valueAt(newRef)\n    print(\"rotVal =\", rotVal)\n    scaleVal = reference_node.knob('scale').valueAt(newRef)\n    print(\"scaleVal =\", scaleVal)\n    skewXVal = reference_node.knob('skewX').valueAt(newRef)\n    print(\"skewXVal =\", skewXVal)\n    skewYVal = reference_node.knob('skewY').valueAt(newRef)\n    print(\"skewYVal =\", skewYVal)\n    \n    translate_knob = reference_node\['translate']\n    translate_curve = translate_knob.animation(0)        \n    first_frame = int(translate_curve.keys()\[0].x)\n    last_frame = int(translate_curve.keys()\[-1].x)        \n    \n    if reference_node.knob('translate').isAnimated():\n        # Store the values in a list\n        values = \[]\n        for frame in range(first_frame, last_frame + 1):\n            value = reference_node.knob('translate').getValueAt(frame)\n            values.append((value\[0] - transVal\[0], value\[1] - transVal\[1]))\n    \n        # Set the values on the knob\n        for frame in range(first_frame, last_frame + 1):\n            reference_node.knob('translate').setValueAt(values\[frame - first_frame]\[0], frame, 0)  # Set x coordinate\n            reference_node.knob('translate').setValueAt(values\[frame - first_frame]\[1], frame, 1)  # Set y coordinate\n            \n    if reference_node.knob('rotate').isAnimated():\n        # Store the values in a list\n        values = \[]\n        for frame in range(first_frame, last_frame + 1):\n            value = reference_node.knob('rotate').getValueAt(frame)\n            values.append(value - rotVal)  # Assuming rotVal is a float\n    \n        # Set the values on the knob\n        for frame in range(first_frame, last_frame + 1):\n            reference_node.knob('rotate').setValueAt(values\[frame - first_frame], frame) \n            \n    if reference_node.knob('scale').isAnimated():\n        # Store the values in a list\n        values = \[]\n        for frame in range(first_frame, last_frame + 1):\n            value = reference_node.knob('scale').getValueAt(frame)\n            values.append(value - scaleVal + 1)  # Subtract scaleVal and add 1\n    \n        # Set the values on the knob\n        for frame in range(first_frame, last_frame + 1):\n            reference_node.knob('scale').setValueAt(values\[frame - first_frame], frame)  # Set scale\n            \n    if reference_node.knob('skewX').isAnimated():\n        # Store the values in a list\n        values = \[]\n        for frame in range(first_frame, last_frame + 1):\n            value = reference_node.knob('skewX').getValueAt(frame)\n            values.append(value - skewXVal)  # Store the original skewX value\n    \n        # Set the values on the knob\n        for frame in range(first_frame, last_frame + 1):\n            reference_node.knob('skewX').setValueAt(values\[frame - first_frame], frame)  # Set skewX  \n            \n    if reference_node.knob('skewY').isAnimated():\n        # Store the values in a list\n        values = \[]\n        for frame in range(first_frame, last_frame + 1):\n            value = reference_node.knob('skewY').getValueAt(frame)\n            values.append(value - skewYVal)  # Store the original skewX value\n    \n        # Set the values on the knob\n        for frame in range(first_frame, last_frame + 1):\n            reference_node.knob('skewY').setValueAt(values\[frame - first_frame], frame)  # Set skewX                   \n    \n    reference_node.knob('label' ).setValue(nuke.tcl( 'value newRef' ))\n    \nelse:\n    nuke.message('Woopsie, no node named \"\{0\}\" exists in this script'.format(nodeName))" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 About l "" +STARTLINE T "<font color=#D6C3AA> <font size=3> v1.3 | <font size=1> Victor Rouillard &copy; "}
}
