set cut_paste_input [stack 0]
version 14.0 v6
BackdropNode {
 inputs 0
 name EZ_Backdrop1
 onCreate "import nuke\nimport colorsys\n\ndef createBorder():\n    def rgb_to_int(rgb):\n        r, g, b = \[int(x * 255) for x in rgb]\n        return int('%02x%02x%02x%02x' % (r,g,b,1), 16)\n\n    def adjust_saturation_and_brightness(rgb, sat_factor, val_factor):\n        r, g, b = rgb\n        h, s, v = colorsys.rgb_to_hsv(r, g, b)\n        s *= sat_factor\n        v *= val_factor\n        return colorsys.hsv_to_rgb(h, s, v)\n\n    valFac = parent\['fillBrightness'].value()\n    satFac = parent\['fillSaturation'].value()\n    borderColor = parent\['borderColor'].value()\n    fillColor = adjust_saturation_and_brightness(borderColor, satFac, valFac)\n\n    child = nuke.createNode('BackdropNode')\n    child.showControlPanel(False)\n    child.hideControlPanel()\n    nukescripts.clear_selection_recursive()\n    child.setName(f'\{parent.name()\}_border')\n    child\['xpos'].setValue(parent\['xpos'].value()-5)\n    child\['ypos'].setValue(parent\['ypos'].value())\n    child\['appearance'].setValue('Border')\n    child\['bdwidth'].setValue(parent\['bdwidth'].value()+10)\n    child\['bdheight'].setValue(parent\['bdheight'].value()+5)\n    child\['z_order'].setValue(parent\['z_order'].value()-1)\n    borderColorInt = rgb_to_int(borderColor)\n    child\['tile_color'].setValue(borderColorInt)\n    child\['border_width'].setValue(parent\['borderWidth'].value())\n\n    parent\['childName'].setValue(child\['name'].value())\n\n    parent\['xpos'].setValue(parent\['xpos'].value()+1)\n    parent\['ypos'].setValue(parent\['ypos'].value()+1)\n    parent\['xpos'].setValue(parent\['xpos'].value()-1)\n    parent\['ypos'].setValue(parent\['ypos'].value()-1)\n\n    parent\['borderColor'].setVisible(True)\n    parent\['borderColor_panelDropped'].setValue(True)\n    parent\['borderWidth'].setVisible(True)\n    parent\['removeBorder'].setVisible(True)\n    parent\['createBorder'].setVisible(False)\n    parent\['borderExists'].setValue(True)\n    parent\['apply'].setVisible(True)\n    parent\['spacer'].setVisible(True)\n    parent\['pickColor'].setVisible(True)\n\n\nparent = nuke.thisNode()\n\n\nborder_node_exists = False\nfor node in nuke.allNodes():\n    if node.name().startswith(parent.name() + \"_border\"):\n        border_node_exists = True\n        break\n\nif not border_node_exists:\n    if parent\['borderExists'].value() == True:\n        createBorder()\n\n    else:\n        parent\['borderColor'].setVisible(False)\n        parent\['borderColor_panelDropped'].setValue(False)\n        parent\['borderWidth'].setVisible(False)\n        parent\['removeBorder'].setVisible(False)\n        parent\['createBorder'].setVisible(True)\n        parent\['borderExists'].setValue(False)\n        parent\['pickColor'].setVisible(False)\n"
 onDestroy "parent = nuke.thisNode()\nchildName = parent\['childName'].value()\nchildNode = nuke.toNode(childName)\n\nnuke.delete(childNode)"
 knobChanged "import nuke\nimport colorsys\n\ndef rgb_to_int(rgb):\n    r, g, b = \[int(x * 255) for x in rgb]\n    return int('%02x%02x%02x%02x' % (r,g,b,1), 16)\n\ndef adjust_saturation_and_brightness(rgb, sat_factor, val_factor):\n    r, g, b = rgb\n    h, s, v = colorsys.rgb_to_hsv(r, g, b)\n    s *= sat_factor\n    v *= val_factor\n    return colorsys.hsv_to_rgb(h, s, v)   \n  \nparent = nuke.thisNode()\nk = nuke.thisKnob()\nchildName = parent\['childName'].value()\nchild = nuke.toNode(childName)\nborderWidth = int(parent\['borderWidth'].value())\nvalFac = parent\['fillBrightness'].value()\nsatFac = parent\['fillSaturation'].value()        \nborderColor = parent\['borderColor'].value()   \nfillColor = adjust_saturation_and_brightness(borderColor, satFac, valFac) \nfillLabelValue = parent\['fillLabel'].value()\ncenterSnippit = \"\"\nnukeIcon = parent\['iconChoice'].label()\n\n#========================================================================================================\n\n\nif parent\['allign'].value() == \"Center\":\n    centerSnippit = \"<center>\"\nelif parent\['allign'].value() == \"Right\":\n    centerSnippit = '<p style=\"text-align: right;\">'\nelse:\n    centerSnippit = \"\"\n\nif k.name() == \"fillLabel\":\n    if parent\['iconChoice'].label() == \"Choose Icon\":\n        parent\['label'].setValue(f\"\{centerSnippit\}\{fillLabelValue\}\") \n    else:\n        parent\['label'].setValue(f\"\{centerSnippit\}\{nukeIcon\}\{fillLabelValue\}\") \n        \nif k.name() == \"allign\":\n    if parent\['iconChoice'].label() == \"Choose Icon\":\n        parent\['label'].setValue(f\"\{centerSnippit\}\{fillLabelValue\}\") \n    else:\n        parent\['label'].setValue(f\"\{centerSnippit\}\{nukeIcon\}\{fillLabelValue\}\") \nif k.name() == \"iconChoice\":\n    if parent\['iconChoice'].label() == \"Choose Icon\":\n        parent\['label'].setValue(f\"\{centerSnippit\}\{fillLabelValue\}\") \n    else:\n        parent\['label'].setValue(f\"\{centerSnippit\}\{nukeIcon\}\{fillLabelValue\}\")         \nif k.name() == \"textSize\":\n    parent\['note_font_size'].setValue(parent\['textSize'].value())    \n\n#========================================================================================================\n   \nif k.name() == \"fillBrightness\":\n    valFac = k.value()\n    parent\['fillColor'].setValue(fillColor)\n    \nif k.name() == \"fillSaturation\":\n    satFac = k.value()\n    parent\['fillColor'].setValue(fillColor)    \n      \nif k.name() == \"borderColor\":\n    parent\['fillColor'].setValue(fillColor)  \n    \nif k.name() == \"borderWidth\":\n    child\['border_width'].setValue(parent\['borderWidth'].value())     \n     \n\n#========================================================================================================\n\nif k.name() == \"z_order\":\n    if parent\['borderExists'].value() == True:\n        child\['z_order'].setValue(parent\['z_order'].value()-1)\n\nif k.name() == \"xpos\":\n    if parent\['borderExists'].value() == True:\n        child\['xpos'].setValue(parent\['xpos'].value()-5) \n    \nif k.name() == \"ypos\":\n    if parent\['borderExists'].value() == True:\n        child\['ypos'].setValue(parent\['ypos'].value())    \n    \nif k.name() == \"bdwidth\":\n    if parent\['borderExists'].value() == True:\n        child\['bdwidth'].setValue(parent\['bdwidth'].value()+10)    \n    \nif k.name() == \"bdheight\":\n    if parent\['borderExists'].value() == True:\n        child\['bdheight'].setValue(parent\['bdheight'].value()+5)    \n\n#========================================================================================================\n"
 tile_color 0x24242401
 label <center>
 note_font Arial
 note_font_size 50
 selected true
 xpos -1050
 ypos -1365
 bdwidth 335
 bdheight 401
 addUserKnob {20 user l Backdrop}
 addUserKnob {26 label_tab l "@b; <font size=4>Label"}
 addUserKnob {1 fillLabel l " "}
 addUserKnob {22 iconChoice l "Choose Icon" -STARTLINE T "import os\nimport nuke\nfrom PySide2 import QtWidgets, QtGui, QtCore\n\nclass IconChooser(QtWidgets.QDialog):\n    def __init__(self, parent=None):\n        super(IconChooser, self).__init__(parent)\n        self.setWindowTitle('Choose an Icon')\n        self.layout = QtWidgets.QGridLayout()\n        self.setLayout(self.layout)\n\n        no_icon_button = QtWidgets.QPushButton('No Icon')\n        no_icon_button.clicked.connect(self.button_clicked)\n        self.layout.addWidget(no_icon_button, 0, 0)\n\n\n        icons = \['Render.png', 'Viewer.png', '2D.png', \n                 'Assert.png', 'Tracker.png', 'Camera.png', \n                 'DeepFromImage.png', 'ParticleBounce.png', 'Modify.png', \n                 'Defocus.png', 'Glint.png', 'Grain.png', 'ColorWheel.png', 'ColorLookup.png', 'ColorCorrect.png', 'Roto.png', 'Merge.png', 'Shader.png', 'Read.png', 'Write.png', 'GridWarp.png', 'Card.png', 'TimeOffset.png', 'EdgeDetect.png', 'Position.png']\n        for i, icon in enumerate(icons):\n            button = QtWidgets.QPushButton('')\n            button.setIcon(QtGui.QIcon(os.path.join('C:/Program Files/Nuke14.0v6/plugins/icons', icon)))\n            button.setIconSize(QtCore.QSize(32, 32))\n            button.setObjectName(icon)\n            button.clicked.connect(self.button_clicked)\n            row = 1 + i // 5 \n            col = i % 5\n            self.layout.addWidget(button, row, col)\n\n    def button_clicked(self):\n        clicked_button = self.sender()\n        clicked_icon = clicked_button.objectName()\n\n        if clicked_button.text() == 'No Icon':\n            nuke.thisNode()\['iconChoice'].setLabel('Choose Icon')\n        else:\n            nuke.thisNode()\['iconChoice'].setLabel('<img src=\"\{\}\">'.format(clicked_icon))\n\n        self.close()\n\ndef show_icon_chooser():\n    dialog = IconChooser()\n    dialog.exec_()\n\nshow_icon_chooser()\n"}
 addUserKnob {3 textSize l Size}
 textSize 50
 addUserKnob {4 allign l " " -STARTLINE M {Left Center Right "" ""}}
 allign Center
 addUserKnob {26 spacer2 l "" -STARTLINE T "                                                                                                                                                                                  "}
 addUserKnob {22 fitSelection l "Fit To Nodes" t "When clicked, this button sets the position and size of the backdrop to selected nodes." -STARTLINE T "import nuke \n\nselected_nodes = nuke.selectedNodes()\nparent = nuke.thisNode()\nchildName = parent\['childName'].value()\nchild = nuke.toNode(childName)\nmin_x = min(node.xpos() for node in selected_nodes)\nmax_x = max(node.xpos() + node.screenWidth() for node in selected_nodes)\nmin_y = min(node.ypos() for node in selected_nodes)\nmax_y = max(node.ypos() + node.screenHeight() for node in selected_nodes)\n\nparent\['xpos'].setValue(min_x - 50)\nparent\['ypos'].setValue(min_y - 125)\nparent\['bdwidth'].setValue(max_x - min_x + 100)\nparent\['bdheight'].setValue(max_y - min_y + 250)\n\nif parent\['borderExists'].value() == True:\n    child\['xpos'].setValue(min_x - 50-12)\n    child\['ypos'].setValue(min_y - 125)\n    child\['bdwidth'].setValue(max_x - min_x + 100+25)\n    child\['bdheight'].setValue(max_y - min_y + 250+15) "}
 addUserKnob {26 borderText l "@b;Border"}
 addUserKnob {1 childName +INVISIBLE}
 addUserKnob {6 borderExists l border -STARTLINE +INVISIBLE}
 addUserKnob {6 fillExists l fill -STARTLINE +INVISIBLE}
 fillExists true
 addUserKnob {22 createBorder l "@b; <font size=5>+" T "import nuke\nimport colorsys\n\ncreateBorder()\n" +STARTLINE}
 addUserKnob {18 borderColor l Color: +HIDDEN}
 borderColor {0.36 0.36 0.36}
 addUserKnob {6 borderColor_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 color_rgb_panelDropped true
 addUserKnob {3 borderWidth l "Border Width:" +HIDDEN}
 borderWidth 10
 addUserKnob {22 pickColor l "Pick Color" -STARTLINE +HIDDEN T "import nuke\n\ncolor_mapping = \{\n    'Blur': (0.81, 0.5, 0.31),\n    'Erode': (0.81, 0.5, 0.31),\n    'Median': (0.81, 0.5, 0.31),\n    'Sharpen': (0.81, 0.5, 0.31),\n    'Defocus': (0.81, 0.5, 0.31),\n    'Shuffle': (0.57, 0.19, 0.32),\n    'Remove': (0.57, 0.19, 0.32),\n    'Copy': (0.57, 0.19, 0.32),\n    'Transform': (0.68, 0.49, 0.69),\n    'Cornerpin': (0.68, 0.49, 0.69),\n    'TransformMasked': (0.68, 0.49, 0.69),\n    'Mirror': (0.68, 0.49, 0.69),\n    'Reformat': (0.68, 0.49, 0.69),\n    'Crop': (0.68, 0.49, 0.69),\n    'IDistort': (0.68, 0.49, 0.69),\n    'Write': (0.75, 0.75, 0.0),\n    'Retime': (0.68, 0.63, 0.36),\n    'TimeEcho': (0.68, 0.63, 0.36),\n    'TimeOffset': (0.68, 0.63, 0.36),\n    'SoftClip': (0.68, 0.63, 0.36),\n    'TimeWarp': (0.68, 0.63, 0.36),\n    'FrameHold': (0.68, 0.63, 0.36),\n    'FrameBlend': (0.68, 0.63, 0.36),\n    'AppendClip': (0.68, 0.63, 0.36),\n    'Roto': (0.44, 0.77, 0.44),\n    'RotoPaint': (0.44, 0.77, 0.44),\n    'Invert': (0.48, 0.66, 1),\n    'Clamp': (0.48, 0.66, 1),\n    'ColorCorrect': (0.48, 0.66, 1),\n    'Grade': (0.48, 0.66, 1),\n    'Saturation': (0.48, 0.66, 1),\n    'HueCorrect': (0.48, 0.66, 1),\n    'Camera': (0.61, 0, 0),\n    'Axis': (0.61, 0, 0),\n    'ScanlineRender': (0.61, 0, 0),\n    'Card': (0.61, 0, 0),\n    'Merge': (0.23, 0.31, 0.72),\n    'ChannelMerge': (0.23, 0.31, 0.72),\n    'Keymix': (0.23, 0.31, 0.72),\n    'Keyer': (0, 1, 0),\n    'ChromaKeyer': (0, 1, 0),\n    'Cryptomatte': (0, 1, 0),\n    'HueKeyer': (0, 1, 0),\n    'Primatte': (0, 1, 0),\n    'IBKColourV3': (0, 0.6, 0),\n    'IBKGizmoV3': (0, 0.6, 0),\n    'DeepColorCorrect': (0, 0, 0.38),\n    'DeepCrop': (0, 0, 0.38),\n    'DeepExpression': (0, 0, 0.38),\n    'DeepFromImage': (0, 0, 0.38),\n    'DeepFromFrames': (0, 0, 0.38),\n    'DeepMerge': (0, 0, 0.38),\n    'DeepRecolor': (0, 0, 0.38),\n    'DeepReformat': (0, 0, 0.38),\n    'DeepSample': (0, 0, 0.38),\n    'DeepToImage': (0, 0, 0.38),\n    'DeepToPoints': (0, 0, 0.38),\n    'DeepTransform': (0, 0, 0.38),\n\}\n\nselected_node = nuke.selectedNode()\nif selected_node:\n    tile_color = selected_node\['tile_color'].value()\n    rgb_color = (\n        ((tile_color >> 24) & 0xFF) / 255.0,\n        ((tile_color >> 16) & 0xFF) / 255.0,\n        ((tile_color >> 8) & 0xFF) / 255.0\n    ) if tile_color != 0 else color_mapping.get(selected_node.Class(), (0.8, 0.8, 0.8))\n\n    tool_node = nuke.thisNode()\n    if tool_node:\n        border_color_knob = tool_node.knob('borderColor')\n        if border_color_knob:\n            border_color_knob.setValue(rgb_color)\n        else:\n            nuke.message(\"borderColor knob not found.\")\n    else:\n        nuke.message(\"Tool node not found.\")\nelse:\n    nuke.message(\"No node selected.\")\n"}
 addUserKnob {26 spacer l " " -STARTLINE +HIDDEN T "                                                                                                                                                                        "}
 addUserKnob {22 removeBorder l "@b; <font size=5> -" -STARTLINE +HIDDEN T "import nuke\n\nparent = nuke.thisNode()\nchildNode = parent\['childName'].value()\nchild = nuke.toNode(childNode)\nnuke.delete(child)    \n\nif parent\['borderExists'].value() == True:\n    parent\['borderColor'].setVisible(False)\n    parent\['borderColor_panelDropped'].setValue(False)    \n    parent\['borderWidth'].setVisible(False)  \n    parent\['removeBorder'].setVisible(False)      \n    parent\['createBorder'].setVisible(True)\n    parent\['borderExists'].setValue(False) \n    parent\['spacer'].setVisible(False)\n    parent\['pickColor'].setVisible(False)          \n    if parent\['fillExists'].value() == False:\n        parent\['apply'].setVisible(False)\n    else:\n        parent\['apply'].setVisible(True)     \n    \nparent\['childName'].setValue(None) "}
 addUserKnob {26 fillText l "@b; Fill"}
 addUserKnob {22 createFill l "@b; <font size=5>+" +HIDDEN T "import nuke\nimport colorsys\n\nif parent\['fillExists'].value() == False:\n    parent\['fillColor'].setVisible(True)\n    parent\['fillColor_panelDropped'].setValue(True)    \n    parent\['removeFill'].setVisible(True)      \n    parent\['createFill'].setVisible(False)\n    parent\['fillBrightness'].setVisible(True)    \n    parent\['fillSaturation'].setVisible(True)      \n    parent\['fillExists'].setValue(True)\n    parent\['apply'].setVisible(True) \n\n    def rgb_to_int(rgb):\n        r, g, b = \[int(x * 255) for x in rgb]\n        return int('%02x%02x%02x%02x' % (r,g,b,1), 16)\n    \n    def adjust_saturation_and_brightness(rgb, sat_factor, val_factor):\n        r, g, b = rgb\n        h, s, v = colorsys.rgb_to_hsv(r, g, b)\n        s *= sat_factor\n        v *= val_factor\n        return colorsys.hsv_to_rgb(h, s, v)\n    \n    parent = nuke.thisNode()\n    k = nuke.thisKnob()\n    fillColor = adjust_saturation_and_brightness(parent\['fillColor'].value(), 1, 1)\n    parent\['tile_color'].setValue(rgb_to_int(fillColor))    " +STARTLINE}
 addUserKnob {18 fillColor l Color:}
 fillColor {0.144 0.144 0.144}
 addUserKnob {6 fillColor_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 fillColor_panelDropped true
 addUserKnob {6 color_rgb_1_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 color_rgb_1_panelDropped true
 addUserKnob {7 fillBrightness l Brightness:}
 fillBrightness 0.4
 addUserKnob {7 fillSaturation l Sat: -STARTLINE}
 fillSaturation 0.3
 addUserKnob {22 removeFill l "@b; <font size=5>-" -STARTLINE T "import nuke\n\nif parent\['fillExists'].value() == True:\n    parent\['fillColor'].setVisible(False)    \n    r, g, b = 0.1975, 0.1975, 0.1975\n    r, g, b = \[int(255 * x) for x in \[r, g, b]]\n    color_int = int('%02x%02x%02x%02x' % (r, g, b, 1), 16)    \n    parent\['tile_color'].setValue(color_int)            \n    parent\['fillColor_panelDropped'].setValue(False)    \n    parent\['removeFill'].setVisible(False)      \n    parent\['createFill'].setVisible(True)\n    parent\['fillBrightness'].setVisible(False)    \n    parent\['fillSaturation'].setVisible(False)      \n    parent\['fillExists'].setValue(False) \n       \n    if parent\['borderExists'].value() == False:\n        parent\['apply'].setVisible(False)\n    else:\n        parent\['apply'].setVisible(True)  "}
 addUserKnob {3 zKnob l "Z Order"}
 addUserKnob {26 ""}
 addUserKnob {22 apply l "Apply Colors" T "import nuke\nimport colorsys\n\ndef rgb_to_int(rgb):\n    r, g, b = \[int(x * 255) for x in rgb]\n    return int('%02x%02x%02x%02x' % (r,g,b,1), 16)\n\ndef adjust_saturation_and_brightness(rgb, sat_factor, val_factor):\n    r, g, b = rgb\n    h, s, v = colorsys.rgb_to_hsv(r, g, b)\n    s *= sat_factor\n    v *= val_factor\n    return colorsys.hsv_to_rgb(h, s, v)\n\nparent = nuke.thisNode()\nk = nuke.thisKnob()\n\nif parent\['fillExists'].value() == True:\n    fillColor = adjust_saturation_and_brightness(parent\['fillColor'].value(), 1, 1)\n    parent\['tile_color'].setValue(rgb_to_int(fillColor))\n\nif parent\['borderExists'].value() == True:\n    childName = parent\['childName'].value()\n    child = nuke.toNode(childName)\n    borderColor = parent\['borderColor'].value()\n    child\['tile_color'].setValue(rgb_to_int(borderColor))\n    \n" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 footer l "" +STARTLINE T "<font size=3> v1.8 | For Windows, Nuke 14.0v6<font size=1> Victor Rouillard &copy; "}
}
