NoOp {
 name PT_interpolation_from_metadata
 selected true
 addUserKnob {20 Interpolation}
 addUserKnob {22 extract_interpolation T "import nuke\n\n\ndef extract_interpolation_data_from_read_node(read_node):\n    interpolation_data_dict_list = \[]\n\n\n    # Store the original frame range\n    original_first_frame = read_node\['first'].value()\n    original_last_frame = read_node\['last'].value()\n\n\n    for frame_number in range(int(read_node.firstFrame()), int(read_node.lastFrame()) + 1):\n        # Set the frame number of the Read node\n        read_node\['first'].setValue(frame_number)\n        read_node\['last'].setValue(frame_number)\n\n\n        metadata = extract_exr_metadata(read_node)\n\n\n        if metadata is not None:\n            interpolation_data = \{\n                \"frame_number\": frame_number,\n                \"pt_interp\": metadata.get(\"exr/nuke/pt_interp\", None),\n                \"plate_interp\": metadata.get(\"exr/nuke/plate_interp\", None),\n            \}\n            interpolation_data_dict_list.append(interpolation_data)\n\n\n    # Restore the original frame range\n    read_node\['first'].setValue(original_first_frame)\n    read_node\['last'].setValue(original_last_frame)\n\n\n    return interpolation_data_dict_list\n\n\ndef extract_exr_metadata(read_node):\n    try:\n        metadata_dict = read_node.metadata()\n        return metadata_dict\n    except Exception as e:\n        print(f\"Error extracting metadata: \{e\}\")\n        return None\n\n\ndef _set_interpolation_keys(interpolation_values_list):\n    current_node = nuke.thisNode()\n    pt_knob = current_node.knob(\"pt_interpolation\")\n    pt_knob.setAnimated()\n    plate_knob = current_node.knob(\"plate_interpolation\")\n    plate_knob.setAnimated()\n\n\n    for interpolation_values in interpolation_values_list:\n\n        if interpolation_values\[\"pt_interp\"] is None:\n            continue\n        frame_number = int(interpolation_values\[\"frame_number\"])\n        pt_knob.setValueAt(float(interpolation_values\[\"pt_interp\"]), frame_number)\n        plate_knob.setValueAt(float(interpolation_values\[\"plate_interp\"]), frame_number)\n\n\ndef find_top_read_node(node):\n    if node.Class() == \"Read\":\n        return node\n\n\n    input_nodes = node.dependencies(nuke.INPUTS)\n    if not input_nodes:\n        return None\n\n\n    for input_node in input_nodes:\n        read_node = find_top_read_node(input_node)\n        if read_node:\n            return read_node\n\n\n    return None\n\n\nif __name__==\"__main__\":\n    current_node = nuke.thisNode()\n    top_read_node = find_top_read_node(current_node)\n    interpolation_values_list = extract_interpolation_data_from_read_node(top_read_node) \n    _set_interpolation_keys(interpolation_values_list)" +STARTLINE}
 addUserKnob {7 pt_interpolation}
 addUserKnob {7 plate_interpolation}
}
