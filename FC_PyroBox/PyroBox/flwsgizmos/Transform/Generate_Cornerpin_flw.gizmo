NoOp {
name Generate_Cornerpin_flw
tile_color 0xff5555ff
selected true
addUserKnob {20 User l Export}
addUserKnob {22 Exportcp l "Generate Cornerpin " T "import nuke\n\ndef extract_reposition_points_from_read_node(read_node_name):\n    read_node = nuke.toNode(read_node_name)\n    \n    if read_node is None:\n        print(f\"Read node '\{read_node_name\}' not found.\")\n        return \[]\n\n    reposition_points_dict_list = \[]\n\n    # Store the original frame range\n    original_first_frame = read_node\['first'].value()\n    original_last_frame = read_node\['last'].value()\n\n    for frame_number in range(int(read_node.firstFrame()), int(read_node.lastFrame()) + 1):\n        # Set the frame number of the Read node\n        read_node\['first'].setValue(frame_number)\n        read_node\['last'].setValue(frame_number)\n\n        metadata = extract_exr_metadata(read_node)\n\n        if metadata is not None:\n            reposition_points = \{\n                \"frame_number\": frame_number,\n                \"cpToTwoY\": metadata.get(\"exr/nuke/cpToTwoY\", None),\n                \"cpToOneY\": metadata.get(\"exr/nuke/cpToOneY\", None),\n                \"cpToOneX\": metadata.get(\"exr/nuke/cpToOneX\", None),\n                \"cpToFourY\": metadata.get(\"exr/nuke/cpToFourY\", None),\n                \"cpToFourX\": metadata.get(\"exr/nuke/cpToFourX\", None),\n                \"cpToThreeY\": metadata.get(\"exr/nuke/cpToThreeY\", None),\n                \"cpToThreeX\": metadata.get(\"exr/nuke/cpToThreeX\", None),\n                \"cpToTwoX\": metadata.get(\"exr/nuke/cpToTwoX\", None)\n            \}\n            reposition_points_dict_list.append(reposition_points)\n\n    # Restore the original frame range\n    read_node\['first'].setValue(original_first_frame)\n    read_node\['last'].setValue(original_last_frame)\n\n    return reposition_points_dict_list\n\ndef extract_exr_metadata(read_node):\n    try:\n        metadata_dict = read_node.metadata()\n        return metadata_dict\n    except Exception as e:\n        print(f\"Error extracting metadata: \{e\}\")\n        return None\n    \ndef _generate_cornerpin_from_reposition_points(reposition_points_list):\n\n    reposition_node = nuke.createNode(\"CornerPin2D\")\n    reposition_node\['to1'].setAnimated()\n    reposition_node\['to2'].setAnimated()\n    reposition_node\['to3'].setAnimated()\n    reposition_node\['to4'].setAnimated()\n\n    for reposition_points in reposition_points_list:\n        if reposition_points\[\"cpToOneX\"] is None:\n                continue\n        frame_number = int(reposition_points\[\"frame_number\"])\n        cpToOneX_value = float(reposition_points\[\"cpToOneX\"])  # Convert to float\n        cpToOneY_value = float(reposition_points\[\"cpToOneY\"])  # Convert to float\n        cpToTwoX_value = float(reposition_points\[\"cpToTwoX\"])  # Convert to float\n        cpToTwoY_value = float(reposition_points\[\"cpToTwoY\"])  # Convert to float\n        cpToThreeX_value = float(reposition_points\[\"cpToThreeX\"])  # Convert to float\n        cpToThreeY_value = float(reposition_points\[\"cpToThreeY\"])  # Convert to float\n        cpToFourX_value = float(reposition_points\[\"cpToFourX\"])  # Convert to float\n        cpToFourY_value = float(reposition_points\[\"cpToFourY\"])  # Convert to float\n        \n        reposition_node\['to1'].setValueAt(cpToOneX_value, frame_number, 0)\n        reposition_node\['to1'].setValueAt(cpToOneY_value, frame_number, 1)\n        reposition_node\['to2'].setValueAt(cpToTwoX_value, frame_number, 0)\n        reposition_node\['to2'].setValueAt(cpToTwoY_value, frame_number, 1)\n        reposition_node\['to3'].setValueAt(cpToThreeX_value, frame_number, 0)\n        reposition_node\['to3'].setValueAt(cpToThreeY_value, frame_number, 1)\n        reposition_node\['to4'].setValueAt(cpToFourX_value, frame_number, 0)\n        reposition_node\['to4'].setValueAt(cpToFourY_value, frame_number, 1)\n\n    reposition_node\['from2'].setValue(1024, 0)\n    reposition_node\['from3'].setValue(1024, 0)\n    reposition_node\['from3'].setValue(1024, 1)\n    reposition_node\['from4'].setValue(1024, 1)\n\ndef find_top_read_node_name(node):\n    if node.Class() == \"Read\":\n        return node.name()\n\n    input_nodes = node.dependencies(nuke.INPUTS)\n    if not input_nodes:\n        return None\n\n    for input_node in input_nodes:\n        read_node_name = find_top_read_node_name(input_node)\n        if read_node_name:\n            return read_node_name\n\n    return None\n\n\ncurrent_node = nuke.thisNode()\n\nif current_node is not None:\n    top_read_node = find_top_read_node_name(current_node)\nelse:\n    nuke.message(\"Please connect to Precomp\")\n\nreposition_points_list = extract_reposition_points_from_read_node(top_read_node) \n\n_generate_cornerpin_from_reposition_points(reposition_points_list)\n\n\n\n\n\n\n" +STARTLINE}
}