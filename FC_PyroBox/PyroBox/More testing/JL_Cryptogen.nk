NoOp {
 name JL_Cryptogen
 knobChanged "n = nuke.thisNode()\nk = nuke.thisKnob()\n\n\nif k == n\['meta']:\n    who = str(n\['meta'].value())\n    who = who.replace('manifest','name')\n    who = n.metadata(who)\n    n\['filter'].setValue(who)"
 tile_color 0xc6800ff
 label "\[value filter]"
 note_font Verdana
 selected true
 addUserKnob {20 JL_Cryptogen}
 addUserKnob {4 meta l "" +STARTLINE M {"No inputs"}}
 addUserKnob {1 filter l "" -STARTLINE +DISABLED}
 filter "No inputs"
 addUserKnob {22 Update -STARTLINE T "n = nuke.thisNode()\n\n\nif n.input(0):\n    \n    try:\n        dic = n.metadata().keys()\n        print(dic)\n        lista = list(dic)\n        lista2 = \[]\n        for i in lista:\n            if \"crypto\" in i:\n                if i.endswith(\"manifest\"):\n                    lista2.append(i)\n        \n        n\['meta'].setValues(lista2)\n    \n    except:\n        pass\n\nif not n.input(0):\n    \n    try:\n        empty = \[\"No inputs\"]\n        n\['meta'].setValues(empty)\n        n\['filter'].setValue(\"No inputs\")\n    \n    except:\n        pass"}
 addUserKnob {22 generate l Generate -STARTLINE T "n = nuke.thisNode()\n\nlista = nuke.allNodes()\nfor i in lista:\n    i.setSelected(False)\n    \nn.setSelected(True)\n\n\nkey = n\['meta'].value()\n\n#nuke.message('This will take about 5 min')\n\n#lo detecta como string\nids_dic = n.metadata(key)\n#lo transforma a diccionario\nids_dic = eval(ids_dic)\n#crea una lista de los items\nids_list = list(ids_dic.keys())\n\n#filtrar palabras\nfilter_list = \[]\nfinal_filter_list = \[]\nfilter_words = n\['filter_words'].value()\nif filter_words:\n    #lista de palabras para filtrar\n    filter_list = filter_words.split(',')\n    print(filter_list)\n    print(len(filter_list))\n    #para cada item de la lista de palabras para filtrar\n    for item in ids_list:\n    #check de todas\n        status = 0\n        for palabra in filter_list:\n            if palabra in str(item):\n                status += 1\n    \n        if status == len(filter_list):\n            final_filter_list.append(item)\n                    \n    ids_list = final_filter_list\nprint(ids_list)\nprint(final_filter_list)\n          \nif len(ids_list) == 0:\n    nuke.message('Filter words not found')\n\nelse:\n\n    d = nuke.createNode('Dot')\n    dposy = d.setYpos(d.ypos()+100)\n    dposx = d.xpos()\n    offset = 0\n    d_og = d\n    lista_cryptos = \[]\n    \n    mainMenu = nuke.menu('Nodes')\n    \n    #PROGRESSBAR\n    \n    task = nuke.ProgressTask('Creating cryptos')\n    progresslen = int(len(ids_list))\n    \n    #ids_list= \[\"hola\",\"esto\",\"es\",\"una\",\"prueba\"]\n    for i in ids_list:\n        \n        final_list = \[]\n        lista_nodos_bf = nuke.allNodes()\n        try:\n            #z = mainMenu.findItem('Extras/Cryptomatte/Cryptomatte').invoke()\n            z = nuke.nodes.Cryptomatte()\n        except:\n            pass\n        lista_nodos_after = nuke.allNodes()\n        for item in lista_nodos_after:\n            if i not in lista_nodos_bf:\n                final_list.append(item)\n\n    \n        z = final_list\[0]  \n              \n        who = n\['filter'].value()\n        z.setYpos(d.ypos()+50)\n        z.setXpos(int( dposx - z.screenWidth()/2 + d.screenWidth()/2 ) + offset)\n        z.setInput(0,d)\n        z\['matteList'].setValue(i)\n        z\['label'].setValue(i)\n        lista_cryptos.append(z)\n        if offset != 0:\n            new_d = nuke.nodes.Dot()\n            new_d.setXYpos(d.xpos()+ offset,d.ypos() )\n            z.setInput(0,new_d)\n                      \n            new_d.setInput(0,d_og)\n            d_og = new_d\n        offset+=150\n        z\['cryptoLayerChoice'].setValue(who)\n        \n        #PROGRESSBAR\n        \n        try:\n            task.setMessage('Generating')\n            task.setProgress(0 + progresslen)\n            \n    \n            if task.isCancelled():\n                raise StopIteration()\n\n        except StopIteration:\n            nuke.message('Cancelled')\n            del(task)\n        \n    del(task)  \n    \n          \nleft_dot = nuke.nodes.Dot()\nleft_dot.setXYpos(d.xpos()-500, d.ypos())\n\n\nallnodes = nuke.allNodes()\nfor i in allnodes:\n    i.setSelected(False)\n    \nleft_dot.setSelected(True)\n\n#crear multiply\nmethod = n\['method'].value()\nlistamultis = \[]\noffset = 200\nfor i in lista_cryptos:\n    multi = nuke.createNode(method)\n    multi.setInput(1,i)\n    multi.setXYpos(left_dot.xpos() - int(multi.screenWidth()/2) + int(left_dot.screenWidth()/2),left_dot.ypos() + offset)\n    listamultis.append(multi)\n    offset+= 100\n\n#crear puntos 90\ncontador = 0\nlistapuntos = \[]\nfor i in lista_cryptos:\n    last_dot = nuke.nodes.Dot()\n    multi = listamultis\[contador]\n    last_dot.setXYpos( i.xpos()+ int(i.screenWidth()/2) - int(last_dot.screenWidth()/2), multi.ypos() + int(multi.screenHeight()/2) - int(last_dot.screenHeight()/2) )\n    contador+=1\n    last_dot.setInput(0,i)\n    listapuntos.append(last_dot)\n    \n#conectar mask multiply a puntos 90\ncontador = 0\nfor i in listamultis:\n    i.setInput(1,listapuntos\[contador])\n    contador += 1\n    \n#cerrar propierties\nfor i in nuke.allNodes():\n    i.hideControlPanel()\n\nnuke.message('Enjoy your setup')\n"}
 addUserKnob {1 filter_words l Filter}
 addUserKnob {4 method l "" -STARTLINE M {Multiply Grade "" ""}}
 method Grade
 addUserKnob {26 ""}
 addUserKnob {26 text l "" +STARTLINE T "JL_Cryptogen v1.1 | Joserra Lastras 2024"}
 addUserKnob {26 text_1 l "" +STARTLINE T "<a href=\"https://www.joserralastras.com/\"><span style=\"color:#5f5f5f;\">www.joserralastras.com</a>"}
}
